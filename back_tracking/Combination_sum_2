class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList();
        List<Integer> temp = new ArrayList();
        bt_helper(result, temp, candidates, target, 0);
        return result;
    }
    
    private void bt_helper(List<List<Integer>> result, List<Integer> temp, int []candidates, int target, int start_index) {
        if (target == 0) {
            result.add(new ArrayList<>(temp));
        } else if (target > 0) {
            for (int i = start_index; i < candidates.length; i++) {
                if (i > start && candidates[i] == candidates[i-1]) {
                    continue;
                }
                temp.add(candidates[i]);
                bt_helper(result, temp, candidates, target-candidates[i], i+1);
                temp.remove(temp.size()-1);
            }
        }
    }
}